%% SUTURO Knowledge - Food query interface

:- module(suturo_knowledge_foodreasoner,
    [
      is_edible/2,
      dummyJava/1
    ]).

:- owl_parser:owl_parse('@LOCAL_PACKAGE_PATH@/owl/suturo_knowledge_hierarchy.owl', false, false, true).
:- owl_parser:owl_parse('@LOCAL_PACKAGE_PATH@/owl/orly.owl', false, false, true).

:- rdf_db:rdf_register_ns(suturo, 'http://www.suturo.de/ontology/hierarchy#', [keep(true)]).



%% is_edible(+ObjectList, -EdibleObject)
% 
% Queries the knowledge database for edibility of the given objects and returns a list of edible objects.
%
% @param ObjectList       List of percieved objects, containing id, label, object volume and object shape.
% @param EdibleObjectList List of edible objects.
%
is_edible(ObjectList, EdibleObjectList) :-
	findall(EdibleID, get_edible_objects(ObjectList, EdibleID), EdibleObjects),
	list_to_set(EdibleObjects, EdibleObjectList).

%$ Accessor predicate for perceived objects
perceived_object([ID, Label, Volume, Shape], ID, Label, Volume, Shape).

%% This parses float strings from LISP (1.23456789d-123) to prolog float
dfloat_to_float(StringDoubleFloat, Float) :-
	atomic_list_concat(List, 'd', StringDoubleFloat),
	atomic_list_concat(List, 'e', FloatString),
	atom_number(FloatString, Float).

%% Returns edible object ids
get_edible_objects(ObjectList, ID) :-
	member(SingleObject, ObjectList),
	perceived_object(SingleObject, ID, _, VolumeString, _),
	dfloat_to_float(VolumeString, Volume),
	owl_individual_of(X, suturo:'Edible'),
	% owl_individual_of(X, suturo:Shape), 
	owl_has(X, suturo:'volumeOfObject', literal(type(_, VolString))),
	owl_has(X, suturo:'varianceOfVolume', literal(type(_, VarString))),
	atom_number(VolString, ObjVol),
	atom_number(VarString, ObjVar),
	Min is ObjVol - ObjVar,
	Max is ObjVol + ObjVar,
	Min =< Volume,
	Max >= Volume.

%% This is a test for JNI integration
dummyJava(Out) :-
	jpl_call('de.suturo.knowledge.foodreasoner.PrologBridge', 'updatePerception', [], Out_raw),
	jpl_get(Out_raw,'length',Length),
	is(Indexe, Length-1),
	%findall((jpl_get(Out_raw,Index,Perceived_object),
	%							jpl_get(Perceived_object,'c_volume',C)
	%							),between(0,Indexe,Index),Out).
	forall(between(0,Indexe,Index),(jpl_get(Out_raw,Index,Perceived_object),
								%jpl_get(Perceived_object,'c_volume',C)
								get_perceived_object_infos(Perceived_object, List),
								writeln(List)
								)
			).
	%jpl_get(Stuff,'c_volume',Out).

get_perceived_object_infos(Obj_id, [_c_id, _c_centroid, _c_volume, _frame_id,
 _recognition_label_2d, _recognition_label_3d, _c_shape, _c_color_average_r, _c_color_average_g, _c_color_average_b,
 _c_color_average_h, _c_color_average_s, _c_color_average_v, _c_hue_histogram, _c_hue_histogram_quality, _c_roi_origin, _c_roi_width,
 _c_roi_height ]):-
	jpl_get(Obj_id, 'c_id', _c_id),
	jpl_get(Obj_id, 'c_centroid', _c_centroid),
	jpl_get(Obj_id, 'c_volume', _c_volume),
	jpl_get(Obj_id, 'frame_id', _frame_id),
	jpl_get(Obj_id, 'recognition_label_2d', _recognition_label_2d),
	jpl_get(Obj_id, 'recognition_label_3d', _recognition_label_3d),
	jpl_get(Obj_id, 'c_shape', _c_shape),
	jpl_get(Obj_id, 'c_color_average_r', _c_color_average_r),
	jpl_get(Obj_id, 'c_color_average_g', _c_color_average_g),
	jpl_get(Obj_id, 'c_color_average_b', _c_color_average_b),
	jpl_get(Obj_id, 'c_color_average_h', _c_color_average_h),
	jpl_get(Obj_id, 'c_color_average_s', _c_color_average_s),
	jpl_get(Obj_id, 'c_color_average_v', _c_color_average_v),
	jpl_get(Obj_id, 'c_hue_histogram', _c_hue_histogram),
	jpl_get(Obj_id, 'c_hue_histogram_quality', _c_hue_histogram_quality),
	jpl_get(Obj_id, 'c_roi_origin', _c_roi_origin),
	jpl_get(Obj_id, 'c_roi_width', _c_roi_width),
	jpl_get(Obj_id, 'c_roi_height', _c_roi_height).