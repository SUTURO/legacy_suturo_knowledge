%% SUTURO Knowledge - Food query interface

:- module(suturo_knowledge_foodreasoner,
    [
      is_edible/2,
      get_perceived_objects_infos/1,
      save_perception/1,
      edibleOn/2,
      containerOn/2,
      updatePerception/1,
      placedObjectInBox/3
    ]).
:- use_module(library('knowrob_objects')).
:- owl_parser:owl_parse('@LOCAL_PACKAGE_PATH@/owl/suturo_knowledge_hierarchy.owl', false, false, true).
:- owl_parser:owl_parse('@LOCAL_PACKAGE_PATH@/owl/orly.owl', false, false, true).


:- rdf_db:rdf_register_ns(suturo, 'http://www.suturo.de/ontology/hierarchy#', [keep(true)]).
:- rdf_db:rdf_register_ns(knowrob, 'http://ias.cs.tum.edu/kb/knowrob.owl#', [keep(true)]).

edible(pringles).
edible(milka).
edible(testobj1). % FINDME for planning testing
volume(ball, 0.0024, 0.0001).
volume(pringles, 0.00085, 0.0001).
volume(tee, 0.00025, 0.00005).
volume(paket, 0.00515, 0.00025).
volume(milka, 0.0006, 0.00005).
volume(testobj1, 0.00339, 0.001). % FINDME for planning testing

container_object(ediblebox).
container_object(nonediblebox).

containerFor(ediblebox, edible).
containerFor(nonediblebox, nonedible).

name(ediblebox, edibleBox).
name(nonediblebox, nonEdibleBox).

type(ediblebox, container).
type(nonediblebox, container).

centroid_x(ediblebox, 1).
centroid_y(ediblebox, 1).
centroid_z(ediblebox, 1).
centroid_x(nonediblebox, 1).
centroid_y(nonediblebox, 2).
centroid_z(nonediblebox, 1).
centroid_x(pringles, 1).
centroid_y(pringles, 3).
centroid_z(pringles, 1).
centroid_x(milka, 1).
centroid_y(milka, 4).
centroid_z(milka, 1).
centroid_x(testobj1, 1).
centroid_y(testobj1, 5).
centroid_z(testobj1, 1).

frameId(ediblebox, Jim).
frameId(nonediblebox, Bo).
frameId(pringles, Bob).
frameId(milka, Kelso).
frameId(testonj1, Fubar).


onTable(ediblebox).
onTable(nonediblebox).
onTable(pringles).
onTable(milka).
onTable(testobj1).




%% is_edible(+ObjectList, -EdibleObject)
% 
% Queries the knowledge database for edibility of the given objects and returns a list of edible objects.
%
% @param ObjectList       List of percieved objects, containing id, label, object volume and object shape.
% @param EdibleObjectList List of edible objects.
%
is_edible(ObjectList, EdibleObjectList) :-
	findall(EdibleID, get_edible_objects(ObjectList, EdibleID), EdibleObjects),
	list_to_set(EdibleObjects, EdibleObjectList).

%$ Accessor predicate for perceived objects
perceived_object([ID, Label, Volume, Shape], ID, Label, Volume, Shape).

%% This parses float strings from LISP (1.23456789d-123) to prolog float
dfloat_to_float(StringDoubleFloat, Float) :-
	atomic_list_concat(List, 'd', StringDoubleFloat),
	atomic_list_concat(List, 'e', FloatString),
	atom_number(FloatString, Float).

%% Returns edible object ids
get_edible_objects(ObjectList, ID) :-
	member(SingleObject, ObjectList),
	perceived_object(SingleObject, ID, _, VolumeString, _),
	dfloat_to_float(VolumeString, Volume),
	owl_individual_of(X, suturo:'Edible'),
	% owl_individual_of(X, suturo:Shape), 
	owl_has(X, suturo:'volumeOfObject', literal(type(_, VolString))),
	owl_has(X, suturo:'varianceOfVolume', literal(type(_, VarString))),
	atom_number(VolString, ObjVol),
	atom_number(VarString, ObjVar),
	Min is ObjVol - ObjVar,
	Max is ObjVol + ObjVar,
	Min =< Volume,
	Max >= Volume.


%% Accessor predicate for containers
container_object(ContainerFor, Name, Type,[Centroid_x, Centroid_y, Centroid_z], FrameId).

%% Returns edible objects on table ids
edibleOn(_, Out) :-
%	findall(perceived_object, onTable(X), Out).
	Out=[[edible,pringles,box,[1,3,1],'Bob'],[edible,milka,box,[1,4,1],'Kelso']].
%% Returns containers on table ids
containerOn(_, Out) :-
%	findall(container_object, onTable(X), Out).
	Out=[[edible,ediblebox,container,[1,1,1],'Jim'],[nonedible,nonediblebox,container,[1,2,1],'Bo']].
%% Die Perception wird abgefragt und die Semantic Map aktualisiert
%gibt momentan 3 objekte aus
updatePerception(Out) :-
%	findall(perceived_object, edible(X), Out).
	Out=[[edible,pringles,box,[1,3,1],'Bob'],[edible,milka,box,[1,4,1],'Kelso'],[edible,testobject1,sphere,[1,5,1],'Fubar']].

%% Abfrage ob Object in Box platziert wurde
%gibt momentan eine leere Liste aus
placedObjectInBox(_, _, Out) :-
%	findall(X,volume(tee, 0, X),Out).
	Out=[].

%%rage_
%% create_object_perception(ObjClass, ObjPose, PerceptionTypes, ObjInst) :-
%%     rdf_instance_from_class(ObjClass, ObjInst),
%%     create_perception_instance(PerceptionTypes, Perception),
%%     set_object_perception(ObjInst, Perception),
%%     set_perception_pose(Perception, ObjPose).

%% create_object_perception(_recognition_label_2d, [1,0,0,X,0,1,0,Y,0,0,1,Z], [])

rgb_color_variance(0.1).
hsv_color_variance(0.1).
volume_Variance(0.1).
shape(0, 'NONE').
shape(1, 'Box').
shape(2, 'Cylinder').
shape(3, 'Sphere').


save_perception(ObjectInst) :-
	get_perceived_objects_infos(DataList),
	member(Object, DataList),
	(check_if_object_available(Object) ->
	writeln('LOl Object there'); writeln('Im doing something!'),create_object_perception(Object, [], ['TemporallyExtendedThing'], ObjectInst)).


create_object_perception([_c_id, _c_centroid, _c_volume, _frame_id,
 _recognition_label_2d, _c_shape, _c_color_average_r, _c_color_average_g, _c_color_average_b,
 _c_color_average_h, _c_color_average_s, _c_color_average_v, _c_hue_histogram, _c_hue_histogram_quality, 
 X_Coord, Y_Coord, Z_Coord, Odom_FrameId],
  ObjPose, PerceptionTypes, ObjInst) :-

	%% if shape != 0 
	(_c_shape =\= 0 ->
		shape(_c_shape, ShapeString),
		writeln('Want to concat the strings'),
		atom_concat('http://ias.cs.tum.edu/kb/knowrob.owl#', ShapeString, Type),
		atom_concat('Got Type Shape ', Type , Log),
		writeln(Log);
    	%%else 
    	writeln('Want to concat the strings'),
    	atom_concat('http://ias.cs.tum.edu/kb/knowrob.owl#', 'Thing', Type),
    	atom_concat('Got Type Thing ', Type , Log),
		writeln(Log)),
	writeln('Now want to assert the Object'),
    (_recognition_label_2d \= '' ->
    	atom_concat('http://ias.cs.tum.edu/kb/knowrob.owl#', _recognition_label_2d, ObjInst),
    	rdf_assert(ObjInst, rdf:type, Type); 
    	rdf_instance_from_class(Type, ObjInst)),
    assert_rgb_colors(ObjInst, _c_color_average_r, _c_color_average_g, _c_color_average_b),
    assert_rgb_colors(ObjInst, _c_color_average_h, _c_color_average_s, _c_color_average_v),
   	rdf_assert(ObjInst, knowrob:'volumeOfObject', literal(_c_volume)),
    create_perception_instance(PerceptionTypes, Perception),
    set_object_perception(ObjInst, Perception),
    set_perception_pose(Perception, [1,0,0,X_Coord,0,1,0,Y_Coord,0,0,1,Z_Coord,0,0,0,0]).

assert_rgb_colors(ObjInst, R_Color, G_Color, B_Color) :-
	rdf_assert(ObjInst, rdf:type, knowrob:'RGBAverageColor'),
	writeln(R_Color),
	writeln(G_Color),
	writeln(B_Color),
	rdf_assert(ObjInst, suturo:'rColorValue', literal( R_Color)),
	rdf_assert(ObjInst, suturo:'gColorValue', literal( G_Color)),
	rdf_assert(ObjInst, suturo:'bColorValue', literal( B_Color)).

assert_rgb_colors(ObjInst, H_Color, S_Color, V_Color) :-
	rdf_assert(ObjInst, rdf:type, knowrob:'HSVAverageColor'),
	rdf_assert(ObjInst, suturo:'HColorValue', literal(H_Color)),
	rdf_assert(ObjInst, suturo:'SColorValue', literal(S_Color)),
	rdf_assert(ObjInst, suturo:'VColorValue', literal(V_Color)).

check_if_object_available([_c_id, _c_centroid, _c_volume, _frame_id,
 _recognition_label_2d, _c_shape, _c_color_average_r, _c_color_average_g, _c_color_average_b,
 _c_color_average_h, _c_color_average_s, _c_color_average_v, _c_hue_histogram, _c_hue_histogram_quality]) :-
	atom_concat('http://ias.cs.tum.edu/kb/knowrob.owl#', _recognition_label_2d, ObjInst),
	rdf_has(ObjInst, _ , _);
	shape(_c_shape, ShapeString),
	atom_concat('http://ias.cs.tum.edu/kb/knowrob.owl#', ShapeString, Shape),
	rdf_has(X, rdf:type ,Shape),
	volume_in_range(X, _c_volume),
	rgb_is_fitting(X,  _c_color_average_r, _c_color_average_g, _c_color_average_b),
	hsv_is_fitting(X, _c_color_average_h, _c_color_average_s, _c_color_average_v).




volume_in_range(ObjectIdentifier, Volume) :-
	rdf_has(ObjectIdentifier , 'http://ias.cs.tum.edu/kb/knowrob.owl#volumeOfObject', Obj_Vol),
	Min is Obj_Vol * (1 - volume_Variance),
	Max is Obj_Vol * (1 + volume_Variance),
	Min =< Volume,
	Max >= Volume.

rgb_is_fitting(ObjectIdentifier, R_Color, G_Color, B_Color) :-
	rdf_has(ObjectIdentifier, suturo:rColorValue , Obj_R_Color),
	rgb_color_variance(RGBVariance),
	MinR is Obj_R_Color * (1 - RGBVariance),
	MaxR is Obj_R_Color * (1 + RGBVariance),
	MinR =< R_Color,
	MaxR >= R_Color,
	rdf_has(ObjectIdentifier, suturo:gColorValue , Obj_G_Color),
	MinG is Obj_G_Color * (1 - RGBVariance),
	MaxG is Obj_G_Color * (1 + RGBVariance),
	MinG =< G_Color,
	MaxG >= G_Color,
	rdf_has(ObjectIdentifier, suturo:bColorValue , Obj_B_Color),
	MinB is Obj_B_Color * (1 - RGBVariance),
	MaxB is Obj_B_Color * (1 + RGBVariance),
	MinB =< B_Color,
	MaxB >= B_Color.

hsv_is_fitting(ObjectIdentifier, H_Value, S_Value, V_Value) :-
	rdf_has(ObjectIdentifier, suturo:hColorValue , Obj_H_Value),
	hsv_color_variance(HSVVariance),
	MinH is Obj_H_Value * (1 - HSVVariance),
	MaxH is Obj_H_Value * (1 + HSVVariance),
	MinH =< H_Value,
	MaxH >= H_Value,
	rdf_has(ObjectIdentifier, suturo:sColorValue , Obj_S_Value),
	MinS is Obj_S_Value * (1 - HSVVariance),
	MaxS is Obj_S_Value * (1 + HSVVariance),
	MinS =< S_Value,
	MaxS >= S_Value,
	rdf_has(ObjectIdentifier, suturo:vColorValue , Obj_V_Value),
	MinV is Obj_V_Value * (1 - HSVVariance),
	MaxV is Obj_V_Value * (1 + HSVVariance),
	MinV =< V_Value,
	MaxV >= V_Value.

head_element([Head| Tail], Head). 
%% This is a test for JNI integration
get_perceived_objects_infos(PODataList) :-
	jpl_new('de.suturo.knowledge.foodreasoner.PrologBridge',[], PrologBridge),
	jpl_call(PrologBridge, 'updatePerception', [], Out_raw),
	jpl_get(Out_raw,'length',Length),
	is(Indizees, Length-1),
	findall(POData,processPerceivedObjects(PrologBridge, Out_raw, Indizees, POData), PODataList).

processPerceivedObjects(PrologBridge, Out_raw, Indizees, Result) :-
	numlist(0,Indizees,IndexList),
	member(Index, IndexList),
	jpl_get(Out_raw,Index,Perceived_object),
	get_perceived_object_infos(Perceived_object, POData),
	head_element(POData, _c_id),
	%%%%%%%%%%%%%%%%%%%% TODO: DELETE faked coordinates if odem is working find
	X_Coord is 1,
	Y_Coord is 1,
	Z_Coord is 1,
	Odom_FrameId is 2,
	append(POData,[X_Coord, Y_Coord, Z_Coord, Odom_FrameId], Result).
	%%jpl_call(PrologBridge, 'getOdomCoords', [_c_id], Odom_Raw),
	%% jpl_get(Odom_Raw,'pose', Pose_Raw),
	%% jpl_get(Pose_Raw,'position', Point_Raw),
	%% jpl_get(Point_Raw,'x', X_Coord),
	%% jpl_get(Point_Raw,'y', Y_Coord),
	%% jpl_get(Point_Raw,'z', Z_Coord),
	%% jpl_get(Odom_Raw,'header', Header_Raw),
	%% jpl_get(Header_Raw,'frame_id', Odom_FrameId).


%% get_perceived_object_infos(Obj_id, [_c_id, _c_centroid, _c_volume, _frame_id,
%%  _recognition_label_2d, _recognition_label_3d, _c_shape, _c_color_average_r, _c_color_average_g, _c_color_average_b,
%%  _c_color_average_h, _c_color_average_s, _c_color_average_v, _c_hue_histogram, _c_hue_histogram_quality, _c_roi_origin, _c_roi_width,
%%  _c_roi_height ]):-
get_perceived_object_infos(Obj_id, [_c_id, _c_centroid, _c_volume, _frame_id,
 _recognition_label_2d, _c_shape, _c_color_average_r, _c_color_average_g, _c_color_average_b,
 _c_color_average_h, _c_color_average_s, _c_color_average_v, _c_hue_histogram, _c_hue_histogram_quality]) :-
	jpl_get(Obj_id, 'c_id', _c_id),
	jpl_get(Obj_id, 'c_centroid', _c_centroid),
	jpl_get(Obj_id, 'c_volume', _c_volume),
	jpl_get(Obj_id, 'frame_id', _frame_id),
	jpl_get(Obj_id, 'recognition_label_2d', _recognition_label_2d),
%%	jpl_get(Obj_id, 'recognition_label_3d', _recognition_label_3d),
	jpl_get(Obj_id, 'c_shape', _c_shape),
	jpl_get(Obj_id, 'c_color_average_r', _c_color_average_r),
	jpl_get(Obj_id, 'c_color_average_g', _c_color_average_g),
	jpl_get(Obj_id, 'c_color_average_b', _c_color_average_b),
	jpl_get(Obj_id, 'c_color_average_h', _c_color_average_h),
	jpl_get(Obj_id, 'c_color_average_s', _c_color_average_s),
	jpl_get(Obj_id, 'c_color_average_v', _c_color_average_v),
	jpl_get(Obj_id, 'c_hue_histogram', _c_hue_histogram),
	jpl_get(Obj_id, 'c_hue_histogram_quality', _c_hue_histogram_quality).
%%	jpl_get(Obj_id, 'c_roi_origin', _c_roi_origin),
%%	jpl_get(Obj_id, 'c_roi_width', _c_roi_width),
%%	jpl_get(Obj_id, 'c_roi_height', _c_roi_height).
