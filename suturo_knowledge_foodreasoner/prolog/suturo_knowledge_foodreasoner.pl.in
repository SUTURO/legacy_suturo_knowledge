%% SUTURO Knowledge - Food reasoning module

:- module(suturo_knowledge_foodreasoner,
    [
      updatePerception/1,
      updatePerception/2,
      publishSemanticMap/0,
      placedObjectInBox/3,
      onObject/2,
      isInObject/3,
      withName/2,
      getDimensions/2,
      getKnowrobDimension/2,
      isOnObject/3,
      startObjectLearning/0,
      learnObject/2,
      abortLearning/0,
      finishLearning/0,
      clearPerceived/0,
      loadEnv/1
    ]).

%% Dependencies
:- use_module(library('knowrob_objects')).
:- use_module(library('suturo_knowledge_java_interface')).
:- use_module(library('comp_spatial')).

%% Register owl namespaces
:- rdf_db:rdf_register_ns(suturo, 'http://www.suturo.de/ontology/hierarchy#', [keep(true)]).
:- rdf_db:rdf_register_ns(knowrob, 'http://ias.cs.tum.edu/kb/knowrob.owl#', [keep(true)]).

%% getDimensions(+ObjectInstanceName, -Out)
%%
%% Returns dimensions for a given perceived object instance.
%%
%% 	+ObjectInstanceName (String): Name of object instance
%%  -Out (List): A list consisting of a frame id, the x y z coordinates as list and the dimensions as list.
%%               Example: ['/map', [0.4, 0.5, 0.6], [0.25, 0.21, 0.22]]
getDimensions(ObjectInstanceName, [FrameID, [M03, M13, M23], [Height, Depth, Width]]) :-
	getLatestMatrixOfObject(ObjectInstanceName, _, _, _, M03, _, _, _, M13, _, _, _, M23, _, _, _, _),
	rdf_has(ObjectInstanceName, knowrob:latestDetectionOfObject, ObjectDetection),
	rdf_has(ObjectDetection, suturo:frameID, FrameID_Raw),
	strip_literal_type(FrameID_Raw, FrameID),
	rdf_has(ObjectInstanceName, knowrob:heightOfObject, OHeight),
	strip_literal_type(OHeight, Height_Raw),
	atom_number(Height_Raw, Height),
	rdf_has(ObjectInstanceName, knowrob:depthOfObject, ODepth),
	strip_literal_type(ODepth, Depth_Raw),
	atom_number(Depth_Raw, Depth),
	rdf_has(ObjectInstanceName, knowrob:widthOfObject, OWidth),
	strip_literal_type(OWidth, Width_Raw),
	atom_number(Width_Raw, Width).

%% getKnowrobDimension(+ObjectInstanceName, -Out)
%%
%% Returns dimensions for a static object instance from the semantic map
%%
%% 	+ObjectInstanceName (String): Name of object instance
%%  -Out (List): A list consisting of a frame id, the x y z coordinates as list and the dimensions as list.
getKnowrobDimension(Object, [[M03, M13, M23], [Height, Depth, Width]]):-
	getSemanticMapObjectInfo(Object, _, _, _, M03, _, _, _, M13, _, _, _, M23, _, _, _, _, Width, Height, Depth).

%% onObject(+ObjectInstanceName, -Out)
%%
%% Returns all objects on given object (eg. table) instance.
%%
%% 	+ObjectInstanceName (String): Name of object instance
%%  -Out (List): List of objects. An object is also a list consisting of multiple attributes:
%%               [[edible,name,[centroid_x,centroid_y,centroid_z],frameid,grip-force,use, [Width, Heigth, Depth], [PoseX, PoseY, PoseZ, PoseW]],[...]]
onObject(ObjectInstanceName, Out) :-
	findall([_edible, _name, [M03, M13, M23], FrameID, NM, Unknown, Use, [Width, Height, Depth], [QX, QY, QZ, QW]], (on_Physical(ObjInst, ObjectInstanceName),
			grepInfosToPush(ObjInst, _edible,_name,M03,M13,M23,FrameID, NM, Unknown, Use, Width, Height, Depth, QW, QX, QY, QZ)),Out).

%% withName(+ObjectInstanceName, -Out)
%%
%% Returns all objects on given object (eg. table) instance.
%%
%% 	+ObjectInstanceName (String): Name of object instance
%%  -Out (List): List of objects. An object is also a list consisting of multiple attributes:
%%               [[edible,name,[centroid_x,centroid_y,centroid_z],frameid,grip-force,use, [Width, Heigth, Depth], [PoseX, PoseY, PoseZ, PoseW]],[...]]
withName(ObjectInstanceName, [_edible, _name, [M03, M13, M23], FrameID, NM, Unknown, Use, [Width, Height, Depth], [QX, QY, QZ, QW]]) :-
	grepInfosToPush(ObjectInstanceName, _edible,_name,M03,M13,M23,FrameID, NM, Unknown, Use, Width, Height, Depth, QW, QX, QY, QZ).

%% isOnObject(+Object1, +Object2, -Out)
%%
%% Is true, if object 1 is on object 2
%%
%% 	+Object1 (String): Name of object instance 1
%% 	+Object2 (String): Name of object instance 2
%% 	-Out (Boolean): True if object instance 1 is on object instance 2
isOnObject(Object1, Object2, Out) :-
	Out = on_Physical(Object1, Object2).

%% updatePerception(-Out)
%%
%% Calls the perception service and runs the recognition on the results.
%% Furthermore, a new PlanningScene is published to the manipulation node.
%%
%%  -Out (Number): Number of recognized objects (Note: These are CURRENTLY recognized objects and
%%                 not the amount of recognized objects in the knowledge base)
updatePerception(Out) :-
	once(
		(savePerception(_, ObjectList),
		 length(ObjectList, Out);
		 Out is 0)
		).

%% updatePerception(+SurfaceInstanceName, -Out)
%%
%% Calls the perception service and runs the recognition on the results.
%% Furthermore, a new PlanningScene is published to the manipulation node.
%% The recognized objects are placed right on the given surface with a collision prevention margin of 1 cm
%%
%% 	+SurfaceInstanceName (String): Name of surface whose z-Axis in map is used for object placement
%%  -Out (Number): Number of recognized objects (Note: These are CURRENTLY recognized objects and
%%                 not the amount of recognized objects in the knowledge base)
updatePerception(SurfaceInstanceName, Out) :-
	once(
		(savePerception(SurfaceInstanceName, ObjectList),
		 length(ObjectList, Out);
		 Out is 0)
		).

%% placedObjectInBox(+Object, +Container, -Out)
%%
%% This removes the given Object from the PlanningScene
%%
%%  +Object (String): Name of object instance
%%  +Container (String): Name of container instance
%%  -Out (Number): Empty list (for planning convenience)
placedObjectInBox(Object, Container, Out) :-
	rdf_assert(Object, knowrob:'insideOf', Container),
	%getLatestMatrixOfObject(Container, M00, M01, M02, M03, M10, M11, M12, M13, M20, M21, M22, M23, M30, M31, M32, M33),
	%rdf_has(Container, suturo:frameID, FrameID_Raw),
	%strip_literal_type(FrameID_Raw, Map_FrameId),
	%createPerceptionInstanceToObject([Object, Map_FrameId, M03, M13, M13,
 	%M00, M01, M02, M03, M10, M11, M12, M13, M20, M21, M22, M23, M30, M31, M32, M33],
	%Container),
	perception(PerceptionClient),
	jpl_call(PerceptionClient, 'removeObjectFromPS', [Object],_),
	%rdf_retractall(Object, knowrob:'latestDetectionOfObject',_),
	Out = [].

%% isInObject(+Object1, +Object2, -Out)
%%
%% Is true, if object 1 is inside of object 2
%%
%% 	+Object1 (String): Name of object instance 1
%% 	+Object2 (String): Name of object instance 2
%% 	-Out (Boolean): True if object instance 1 is inside of object instance 2
isInObject(Object1, Object2, Out) :-
	rdf_has(Object1, knowrob:'insideOf', Object2), Out = true;
	in_ContGeneric(Object1, Object2), Out = true;
	Out = false.

%% startObjectLearning
%%
%% Initializes learning procedure for unknown objects
startObjectLearning :-
	true.

%% learnObject(+ObjectInstanceName, -Out)
%%
%% Captures perception data for unknown object denoted by ObjectInstanceName. The perception data is fed into the classifiers from WEKA.
%% For errors watch values of Out parameter.
%%
%%  +ObjectInstanceName (String): Name of unknown object instance
%%  -Out (Integer): Result of the object recognition
learnObject(ObjectInstanceName, Out) :-
	true.

%% abortLearning
%%
%% Abort all captured unfinished perceptions for unknown objects
abortLearning :-
	true.

%% finishLearning
%%
%% Classify all perceived data for unknown objects. This will update the current classifier, all learned objects will be recognized in the future
finishLearning :-
	true.


%% clearPerceived
%%
%% Clears the database of perceived objects and removes all objects from the Planning Scene
clearPerceived :-
	perception(PerceptionClient),
 	jpl_call(PerceptionClient, 'clearPlanningScene', [], _),
 	rdf_retractall(_, knowrob:'latestDetectionOfObject', _),
 	rdf_retractall(_, knowrob:'previousDetectionOfObject', _),
 	rdf_transaction(
 		(forall(rdf_has(Perceptions, rdf:type, knowrob:'VisualPerception'),
 			(rdf_retractall(Perceptions, _, _),
 		 	 rdf_retractall(_, _, Perceptions)
 			))
 		)
 	).

%% publishSemanticMap
%%
%% Publishes all objects from the semantic map to the Planning Scene
publishSemanticMap :-
	perception(PerceptionClient),
	forall(aggregateStaticPlanning(Param), jpl_call(PerceptionClient, 'addSemanticPerception', Param, _)).

%% Load semantic map depending on location passed as argument
loadEnv(Environment) :-
	(Environment = 'gazebo' ->
		owl_parser:owl_parse('@LOCAL_PACKAGE_PATH@/owl/gazebo_room.owl', false, false, true);
   		owl_parser:owl_parse('@LOCAL_PACKAGE_PATH@/lib/iai_maps/owl/room.owl', false, false, true)
   	; owl_parser:owl_parse('@LOCAL_PACKAGE_PATH@/lib/iai_maps/owl/room.owl', false, false, true)
   	).


getLatestCoordinatesOfObject(ObjectIdentifier, X , Y ,Z, FrameID) :-
	rdf_has(ObjectIdentifier, knowrob:latestDetectionOfObject, ObjectDetection),
	rdf_has(ObjectDetection, suturo:frameID, FrameID_Raw),
	strip_literal_type(FrameID_Raw, FrameID),
	rdf_has(ObjectDetection, knowrob:eventOccursAt, RotationMatrix),


	rdf_has(RotationMatrix, knowrob:m03, X_Coord),
	strip_literal_type(X_Coord , X1),
	(rdf_has(ObjectIdentifier, suturo:xOffset, X_Offset) ->
		strip_literal_type(X_Offset , X2S), atom_number(X2S, X2), X is (X1+X2);
		X is X1),

	rdf_has(RotationMatrix, knowrob:m13, Y_Coord),
	strip_literal_type(Y_Coord, Y1),
	(rdf_has(ObjectIdentifier, suturo:yOffset, Y_Offset) ->
		strip_literal_type(Y_Offset , Y2S), atom_number(Y2S, Y2), Y is (Y1+Y2);
		Y is Y1),
	rdf_has(RotationMatrix, knowrob:m23, Z_Coord),
	strip_literal_type(Z_Coord, Z1),
	(rdf_has(ObjectIdentifier, suturo:zOffset, Z_Offset) ->
		strip_literal_type(Z_Offset , Z2S), atom_number(Z2S, Z2), Z is (Z1+Z2);
		Z is Z1).


getSemanticMapObjectInfo(Object, M00, M01, M02, M03, M10, M11, M12, M13, M20, M21, M22, M23, M30, M31, M32, M33, Width, Height, Depth) :- 
	rdf_has(A,'http://ias.cs.tum.edu/kb/knowrob.owl#objectActedOn',Object),
	rdfs_individual_of(A, knowrob:'SemanticMapPerception'),
	rdf_has(Object, knowrob:heightOfObject, OHeight),
	strip_literal_type(OHeight, Height_Raw),
	atom_number(Height_Raw, Height),
	rdf_has(Object, knowrob:depthOfObject, ODepth),
	strip_literal_type(ODepth, Depth_Raw),
	atom_number(Depth_Raw, Depth),
	rdf_has(Object, knowrob:widthOfObject, OWidth),
	strip_literal_type(OWidth, Width_Raw),
	atom_number(Width_Raw, Width),
	rdf_has(A, knowrob:eventOccursAt,RotationMatrix),
	rdf_has(RotationMatrix, knowrob:m00, M00_R),
	strip_literal_type(M00_R , M00_s),
	atom_number(M00_s, M00),
	rdf_has(RotationMatrix, knowrob:m01, M01_R),
	strip_literal_type(M01_R , M01_s),
	atom_number(M01_s, M01),
	rdf_has(RotationMatrix, knowrob:m02, M02_R),
	strip_literal_type(M02_R , M02_s),
	atom_number(M02_s, M02),
	rdf_has(RotationMatrix, knowrob:m03, M03_R),
	strip_literal_type(M03_R , M03_s),
	atom_number(M03_s, M03),
	rdf_has(RotationMatrix, knowrob:m10, M10_R),
	strip_literal_type(M10_R , M10_s),
	atom_number(M10_s, M10),
	rdf_has(RotationMatrix, knowrob:m11, M11_R),
	strip_literal_type(M11_R , M11_s),
	atom_number(M11_s, M11),
	rdf_has(RotationMatrix, knowrob:m12, M12_R),
	strip_literal_type(M12_R , M12_s),
	atom_number(M12_s, M12),
	rdf_has(RotationMatrix, knowrob:m13, M13_R),
	strip_literal_type(M13_R , M13_s),
	atom_number(M13_s, M13),
	rdf_has(RotationMatrix, knowrob:m20, M20_R),
	strip_literal_type(M20_R , M20_s),
	atom_number(M20_s, M20),
	rdf_has(RotationMatrix, knowrob:m21, M21_R),
	strip_literal_type(M21_R , M21_s),
	atom_number(M21_s, M21),
	rdf_has(RotationMatrix, knowrob:m22, M22_R),
	strip_literal_type(M22_R , M22_s),
	atom_number(M22_s, M22),
	rdf_has(RotationMatrix, knowrob:m23, M23_R),
	strip_literal_type(M23_R , M23_s),
	atom_number(M23_s, M23),
	rdf_has(RotationMatrix, knowrob:m30, M30_R),
	strip_literal_type(M30_R , M30_s),
	atom_number(M30_s, M30),
	rdf_has(RotationMatrix, knowrob:m31, M31_R),
	strip_literal_type(M31_R , M31_s),
	atom_number(M31_s, M31),
	rdf_has(RotationMatrix, knowrob:m32, M32_R),
	strip_literal_type(M32_R , M32_s),
	atom_number(M32_s, M32),
	rdf_has(RotationMatrix, knowrob:m33, M33_R),
	strip_literal_type(M33_R , M33_s),
	atom_number(M33_s, M33).

getLatestMatrixOfObject(ObjectIdentifier,  M00, M01, M02, M03, M10, M11, M12, M13, M20, M21, M22, M23, M30, M31, M32, M33) :-
	rdf_has(ObjectIdentifier, knowrob:latestDetectionOfObject, ObjectDetection),
	rdf_has(ObjectDetection, knowrob:eventOccursAt, RotationMatrix),

	rdf_has(RotationMatrix, knowrob:m00, M00_R),
	strip_literal_type(M00_R , M00),
	rdf_has(RotationMatrix, knowrob:m01, M01_R),
	strip_literal_type(M01_R , M01),
	rdf_has(RotationMatrix, knowrob:m02, M02_R),
	strip_literal_type(M02_R , M02),
	rdf_has(RotationMatrix, knowrob:m03, M03_R),
	strip_literal_type(M03_R , M03),
	rdf_has(RotationMatrix, knowrob:m10, M10_R),
	strip_literal_type(M10_R , M10),
	rdf_has(RotationMatrix, knowrob:m11, M11_R),
	strip_literal_type(M11_R , M11),
	rdf_has(RotationMatrix, knowrob:m12, M12_R),
	strip_literal_type(M12_R , M12),
	rdf_has(RotationMatrix, knowrob:m13, M13_R),
	strip_literal_type(M13_R , M13),
	rdf_has(RotationMatrix, knowrob:m20, M20_R),
	strip_literal_type(M20_R , M20),
	rdf_has(RotationMatrix, knowrob:m21, M21_R),
	strip_literal_type(M21_R , M21),
	rdf_has(RotationMatrix, knowrob:m22, M22_R),
	strip_literal_type(M22_R , M22),
	rdf_has(RotationMatrix, knowrob:m23, M23_R),
	strip_literal_type(M23_R , M23),
	rdf_has(RotationMatrix, knowrob:m30, M30_R),
	strip_literal_type(M30_R , M30),
	rdf_has(RotationMatrix, knowrob:m31, M31_R),
	strip_literal_type(M31_R , M31),
	rdf_has(RotationMatrix, knowrob:m32, M32_R),
	strip_literal_type(M32_R , M32),
	rdf_has(RotationMatrix, knowrob:m33, M33_R),
	strip_literal_type(M33_R , M33).
